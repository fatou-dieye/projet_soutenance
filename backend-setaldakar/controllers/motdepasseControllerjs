const nodemailer = require('nodemailer');
const crypto = require('crypto');
const bcrypt = require('bcrypt');
const Utilisateur = require('../models/Utilisateur');

// Fonction pour envoyer un email
const sendResetEmail = async (email, token) => {
  let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'fatoujeey@gmail.com',
      pass: 'aknt khcq smwz hhte'
    }
  });

  let mailOptions = {
    from: 'votre-email@gmail.com',
    to: email,
    subject: 'Réinitialisation de votre mot de passe',
    text: `Utilisez ce lien pour réinitialiser votre mot de passe: http://localhost:3000/reset-password/${token}`
  };

  await transporter.sendMail(mailOptions);
};

exports.requestResetPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const utilisateur = await Utilisateur.findOne({ email });

    if (!utilisateur) {
      return res.status(404).json({ message: 'Aucun utilisateur trouvé avec cet email' });
    }

    // Générer un token de réinitialisation
    const resetToken = crypto.randomBytes(20).toString('hex');
    utilisateur.resetPasswordToken = resetToken;
    utilisateur.resetPasswordExpires = Date.now() + 3600000; // 1 heure

    await utilisateur.save();

    // Envoyer l'email de réinitialisation
    await sendResetEmail(email, resetToken);

    res.status(200).json({ message: 'Email de réinitialisation envoyé' });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la demande de réinitialisation', error: error.message });
  }
};

exports.resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    const utilisateur = await Utilisateur.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!utilisateur) {
      return res.status(400).json({ message: 'Token invalide ou expiré' });
    }

    utilisateur.mot_passe = newPassword;
    utilisateur.resetPasswordToken = undefined;
    utilisateur.resetPasswordExpires = undefined;

    await utilisateur.save();

    res.status(200).json({ message: 'Mot de passe réinitialisé avec succès' });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la réinitialisation du mot de passe', error: error.message });
  }
};
