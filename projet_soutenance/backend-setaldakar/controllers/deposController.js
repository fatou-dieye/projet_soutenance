const Depot = require('../models/depos');
const User = require('../models/Utilisateur'); // Assurez-vous d'avoir un mod√®le User pour les gardiens

// Cr√©er un nouveau d√©p√¥t
// Cr√©er un nouveau d√©p√¥t
exports.createDepot = async (req, res) => {
  try {
    const { lieu, latitude, longitude, gardien_id } = req.body;

    // V√©rifiez si le gardien existe
    const gardien = await User.findById(gardien_id);
    if (!gardien) {
      return res.status(404).json({ message: 'Gardien non trouv√©' });
    }

    // üîí V√©rifier si le gardien est d√©j√† li√© √† un d√©p√¥t
    const existingDepot = await Depot.findOne({ gardien_id });
    if (existingDepot) {
      return res.status(400).json({ message: 'Ce gardien est d√©j√† assign√© √† un d√©p√¥t.' });
    }

    // ‚úÖ Cr√©er le d√©p√¥t
    const depot = new Depot({
      lieu,
      coordonnees: { latitude, longitude },
      gardien_id
    });

    await depot.save();
    res.status(201).json({ message: 'D√©p√¥t cr√©√© avec succ√®s', depot });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Lister tous les d√©p√¥ts
exports.getDepots = async (req, res) => {
  try {
    const depots = await Depot.find().populate('gardien_id', 'nom email'); // Remplacez 'nom email' par les champs que vous souhaitez r√©cup√©rer du gardien
    res.json(depots);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};
//lister le nmbre de depos
// Ajouter cette fonction dans votre contr√¥leur (../controllers/depotController.js)
exports.getDepotsCount = async (req, res) => {
  try {
    const count = await Depot.countDocuments();
    res.json({ count });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};


// Obtenir les gardiens disponibles pour une zone (non assign√©s √† un d√©p√¥t)
exports.getAvailableGardiensByAdresse = async (req, res) => {
  try {
    const { adresse } = req.query;

    // V√©rifier si l'adresse est bien fournie
    if (!adresse) {
      return res.status(400).json({ message: 'L\'adresse est requise.' });
    }

    // Chercher les gardiens d√©j√† assign√©s √† un d√©p√¥t
    const depots = await Depot.find({}, 'gardien_id'); // On r√©cup√®re les gardiens assign√©s
    const assignedIds = depots.map(d => d.gardien_id.toString()); // Extraire les IDs des gardiens assign√©s

    console.log('Gardiens d√©j√† assign√©s:', assignedIds); // Affichage des gardiens d√©j√† assign√©s

    // R√©cup√©rer les gardiens qui ont la bonne adresse et ne sont pas encore assign√©s √† un d√©p√¥t
    const availableGardiens = await User.find({  // Utiliser "User" ici
      role: 'gardient', // Assure-toi que le r√¥le est bien 'gardient'
      adresse: { $regex: new RegExp(adresse, 'i') }, // Utilise $regex pour √™tre insensible √† la casse
      _id: { $nin: assignedIds } // Exclure les gardiens d√©j√† assign√©s √† un d√©p√¥t
    }).select('nom prenom email adresse');

    console.log('Gardiens disponibles:', availableGardiens); // Affiche les gardiens r√©cup√©r√©s

    res.status(200).json(availableGardiens);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des gardiens disponibles:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};